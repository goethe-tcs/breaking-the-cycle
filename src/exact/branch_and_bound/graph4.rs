use super::*;
use crate::utils::int_subsets::AllIntSubsets;
use bitintr::{Pdep, Pext};
use std::convert::TryFrom;

/// Graph4 is a specialized representation for graphs with up to four node *and no loops*.
///
/// Since all diagonal entries are zero, we do not explicitly store them, reducing the adjacency
/// matrix from 16 bits to 12 bits; i.e. we have only 4096 possible graphs and can write down
/// their DFVS solutions in 4096 * 4bits = 2048bytes.
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Graph4 {
    matrix: u16,
}

const OFF_DIAGONAL: u64 = 0b0000_0111_0000_1011_0000_1101_0000_1110;

impl TryFrom<Graph8> for Graph4 {
    type Error = ();

    /// Try to import Graph4 from a Graph8. This will succeed iff all contained edges are incident
    /// to nodes 0-3 and no self-loops exist.
    fn try_from(value: Graph8) -> Result<Self, Self::Error> {
        if (value.matrix & !OFF_DIAGONAL) != 0 {
            Err(())
        } else {
            Ok(Self {
                matrix: value.matrix.pext(OFF_DIAGONAL) as u16,
            })
        }
    }
}

impl From<Graph4> for Graph8 {
    fn from(g4: Graph4) -> Self {
        let matrix = (g4.matrix as u64).pdep(OFF_DIAGONAL);
        Graph8 { matrix, n: 4 } // n may actually be smaller, but we do not really care
    }
}

const LOOKUP: [u8; 2048] = [
    0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x11, 0x00, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11,
    0x00, 0x11, 0x00, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x10, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x10, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x00, 0x11, 0x00, 0x11, 0x10, 0x11, 0x10, 0x11, 0x22, 0x44, 0x22, 0x44, 0x22, 0x34, 0x22, 0x34,
    0x00, 0x11, 0x00, 0x11, 0x10, 0x11, 0x10, 0x11, 0x22, 0x44, 0x22, 0x44, 0x22, 0x34, 0x22, 0x34,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x11, 0x00, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11,
    0x00, 0x11, 0x00, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x10, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x10, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x00, 0x11, 0x00, 0x11, 0x10, 0x11, 0x10, 0x11, 0x22, 0x44, 0x22, 0x44, 0x22, 0x34, 0x22, 0x34,
    0x00, 0x11, 0x00, 0x11, 0x10, 0x11, 0x10, 0x11, 0x22, 0x44, 0x22, 0x44, 0x22, 0x34, 0x22, 0x34,
    0x00, 0x00, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x00, 0x00, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11,
    0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11,
    0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11,
    0x00, 0x00, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x22, 0x33, 0x33, 0x22, 0x22, 0x33, 0x33,
    0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x22, 0x33, 0x33, 0x22, 0x22, 0x33, 0x33,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x33, 0x33, 0x22, 0x34, 0x33, 0x33,
    0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x34, 0x33, 0x33, 0x22, 0x34, 0x33, 0x33,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11,
    0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11,
    0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x33, 0x33, 0x22, 0x34, 0x33, 0x33,
    0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x34, 0x33, 0x33, 0x22, 0x34, 0x33, 0x33,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x33, 0x33, 0x22, 0x34, 0x33, 0x33,
    0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x34, 0x33, 0x33, 0x22, 0x34, 0x33, 0x33,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x11, 0x11,
    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x00, 0x11, 0x00, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11,
    0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x00, 0x11, 0x00, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x22, 0x44, 0x22, 0x34, 0x22, 0x33,
    0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x00, 0x11, 0x00, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x22, 0x44, 0x22, 0x34, 0x22, 0x33,
    0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x00, 0x11, 0x00, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x22, 0x44, 0x22, 0x34, 0x22, 0x33,
    0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33, 0x22, 0x33,
    0x00, 0x00, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x00, 0x00, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11,
    0x22, 0x22, 0x88, 0x88, 0x22, 0x22, 0x38, 0x38, 0x22, 0x22, 0x88, 0x88, 0x22, 0x22, 0x38, 0x38,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11,
    0x22, 0x33, 0x88, 0x33, 0x22, 0x33, 0x38, 0x33, 0x22, 0x33, 0x38, 0x33, 0x22, 0x33, 0x38, 0x33,
    0x00, 0x00, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x22, 0x33, 0x33, 0x22, 0x22, 0x33, 0x33,
    0x22, 0x22, 0x88, 0x88, 0x22, 0x22, 0x38, 0x33, 0x22, 0x22, 0x33, 0x33, 0x22, 0x22, 0x33, 0x33,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x33, 0x33, 0x22, 0x34, 0x33, 0x33,
    0x22, 0x33, 0x88, 0x33, 0x22, 0x33, 0x38, 0x33, 0x22, 0x33, 0x33, 0x33, 0x22, 0x33, 0x33, 0x33,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x88, 0x88, 0x22, 0x34, 0x38, 0x38,
    0x22, 0x88, 0x88, 0x88, 0x22, 0x38, 0x38, 0x38, 0x22, 0x88, 0x88, 0x88, 0x22, 0x38, 0x38, 0x38,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x38, 0x33, 0x22, 0x34, 0x38, 0x33,
    0x22, 0x33, 0x88, 0x33, 0x22, 0x33, 0x38, 0x33, 0x22, 0x33, 0x38, 0x33, 0x22, 0x33, 0x38, 0x33,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x33, 0x33, 0x22, 0x34, 0x33, 0x33,
    0x22, 0x88, 0x88, 0x88, 0x22, 0x33, 0x38, 0x33, 0x22, 0x33, 0x33, 0x33, 0x22, 0x33, 0x33, 0x33,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x33, 0x33, 0x22, 0x34, 0x33, 0x33,
    0x22, 0x33, 0x88, 0x33, 0x22, 0x33, 0x38, 0x33, 0x22, 0x33, 0x33, 0x33, 0x22, 0x33, 0x33, 0x33,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11,
    0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x44, 0x44, 0x22, 0x34, 0x34, 0x34,
    0x22, 0x44, 0x44, 0x44, 0x22, 0x34, 0x34, 0x34, 0x22, 0x44, 0x44, 0x44, 0x22, 0x34, 0x34, 0x34,
    0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54, 0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54,
    0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54, 0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54,
    0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54, 0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54,
    0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54, 0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54,
    0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54, 0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54,
    0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54, 0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54,
    0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54, 0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54,
    0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54, 0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x54, 0x54,
    0x00, 0x00, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x00, 0x00, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11,
    0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11,
    0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11,
    0x00, 0x00, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x22, 0x33, 0x33, 0x22, 0x22, 0x33, 0x33,
    0x22, 0x22, 0x88, 0x88, 0x22, 0x22, 0x38, 0x33, 0x22, 0x22, 0x33, 0x33, 0x22, 0x22, 0x33, 0x33,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x33, 0x33, 0x22, 0x34, 0x33, 0x33,
    0x22, 0x34, 0x88, 0x33, 0x22, 0x34, 0x38, 0x33, 0x22, 0x34, 0x33, 0x33, 0x22, 0x34, 0x33, 0x33,
    0x44, 0x44, 0x88, 0x88, 0x54, 0x54, 0x58, 0x58, 0x44, 0x44, 0x88, 0x88, 0x54, 0x54, 0x58, 0x58,
    0x84, 0x84, 0x88, 0x88, 0x54, 0x54, 0x58, 0x58, 0x84, 0x84, 0x88, 0x88, 0x54, 0x54, 0x58, 0x58,
    0x44, 0x44, 0x88, 0x55, 0x54, 0x54, 0x58, 0x55, 0x44, 0x44, 0x58, 0x55, 0x54, 0x54, 0x58, 0x55,
    0x84, 0x54, 0x88, 0x55, 0x54, 0x54, 0x58, 0x55, 0x54, 0x54, 0x58, 0x55, 0x54, 0x54, 0x58, 0x55,
    0x44, 0x44, 0x88, 0x88, 0x54, 0x54, 0x58, 0x55, 0x44, 0x44, 0x55, 0x55, 0x54, 0x54, 0x55, 0x55,
    0x84, 0x84, 0x88, 0x88, 0x54, 0x54, 0x58, 0x55, 0x54, 0x54, 0x55, 0x55, 0x54, 0x54, 0x55, 0x55,
    0x44, 0x44, 0x88, 0x55, 0x54, 0x54, 0x58, 0x55, 0x44, 0x44, 0x55, 0x55, 0x54, 0x54, 0x55, 0x55,
    0x84, 0x54, 0x88, 0x55, 0x54, 0x54, 0x58, 0x55, 0x54, 0x54, 0x55, 0x55, 0x54, 0x54, 0x55, 0x55,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x11, 0x11,
    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11,
    0x22, 0x33, 0x88, 0x33, 0x22, 0x33, 0x38, 0x33, 0x22, 0x33, 0x38, 0x33, 0x22, 0x33, 0x38, 0x33,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x44, 0x44, 0x22, 0x34, 0x33, 0x33,
    0x22, 0x33, 0x88, 0x33, 0x22, 0x33, 0x38, 0x33, 0x22, 0x33, 0x33, 0x33, 0x22, 0x33, 0x33, 0x33,
    0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x58, 0x58, 0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x58, 0x58,
    0x88, 0x88, 0x88, 0x88, 0x68, 0x68, 0x68, 0x68, 0x88, 0x88, 0x88, 0x88, 0x68, 0x68, 0x68, 0x68,
    0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x58, 0x55, 0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x58, 0x55,
    0x88, 0x66, 0x88, 0x66, 0x68, 0x66, 0x68, 0x66, 0x68, 0x66, 0x68, 0x66, 0x68, 0x66, 0x68, 0x66,
    0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x58, 0x55, 0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x55, 0x55,
    0x88, 0x88, 0x88, 0x88, 0x68, 0x66, 0x68, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
    0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x58, 0x55, 0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x55, 0x55,
    0x88, 0x66, 0x88, 0x66, 0x68, 0x66, 0x68, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
    0x00, 0x00, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x00, 0x00, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11,
    0x22, 0x22, 0x88, 0x88, 0x22, 0x22, 0x38, 0x38, 0x22, 0x22, 0x88, 0x88, 0x22, 0x22, 0x38, 0x38,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11,
    0x22, 0x33, 0x88, 0x33, 0x22, 0x33, 0x38, 0x33, 0x22, 0x33, 0x38, 0x33, 0x22, 0x33, 0x38, 0x33,
    0x00, 0x00, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x22, 0x33, 0x33, 0x22, 0x22, 0x33, 0x33,
    0x22, 0x22, 0x88, 0x88, 0x22, 0x22, 0x38, 0x33, 0x22, 0x22, 0x33, 0x33, 0x22, 0x22, 0x33, 0x33,
    0x00, 0x11, 0x11, 0x11, 0x10, 0x11, 0x11, 0x11, 0x22, 0x44, 0x33, 0x33, 0x22, 0x34, 0x33, 0x33,
    0x22, 0x33, 0x88, 0x33, 0x22, 0x33, 0x38, 0x33, 0x22, 0x33, 0x33, 0x33, 0x22, 0x33, 0x33, 0x33,
    0x44, 0x44, 0x88, 0x88, 0x54, 0x54, 0x58, 0x58, 0x44, 0x44, 0x88, 0x88, 0x54, 0x54, 0x58, 0x58,
    0x88, 0x88, 0x88, 0x88, 0x68, 0x68, 0x98, 0x98, 0x88, 0x88, 0x88, 0x88, 0x68, 0x68, 0x98, 0x98,
    0x44, 0x44, 0x88, 0x55, 0x54, 0x54, 0x58, 0x55, 0x44, 0x44, 0x58, 0x55, 0x54, 0x54, 0x58, 0x55,
    0x88, 0x66, 0x88, 0x99, 0x68, 0x66, 0x98, 0x99, 0x68, 0x66, 0x98, 0x99, 0x68, 0x66, 0x98, 0x99,
    0x44, 0x44, 0x88, 0x88, 0x54, 0x54, 0x58, 0x55, 0x44, 0x44, 0x55, 0x55, 0x54, 0x54, 0x55, 0x55,
    0x88, 0x88, 0x88, 0x88, 0x68, 0x66, 0x98, 0x99, 0x66, 0x66, 0xaa, 0xaa, 0x66, 0x66, 0xaa, 0xaa,
    0x44, 0x44, 0x88, 0x55, 0x54, 0x54, 0x58, 0x55, 0x44, 0x44, 0x55, 0x55, 0x54, 0x54, 0x55, 0x55,
    0x88, 0x66, 0x88, 0x99, 0x68, 0x66, 0x98, 0x99, 0x66, 0x66, 0xaa, 0xcc, 0x66, 0x66, 0xaa, 0x7c,
];

impl Graph4 {
    pub fn exhaustive_search(&self) -> u8 {
        let g8: Graph8 = (*self).into();

        for mask in AllIntSubsets::new(4).map(|x| x as u8) {
            if !g8
                .subgraph(!mask & 0xf)
                .transitive_closure()
                .has_node_with_loop()
            {
                return mask;
            }
        }

        panic!("unreachable");
    }

    pub fn lookup(&self) -> u8 {
        (LOOKUP[self.matrix as usize / 2] >> (4 * (self.matrix & 1))) & 0xf
    }
}

pub fn build_lookup_table() -> [u8; 2048] {
    let mut table = [0u8; 2048];

    for (i, entry) in table.iter_mut().enumerate() {
        let solution_lower = Graph4 {
            matrix: (2 * i as u16),
        }
        .exhaustive_search();
        let solution_upper = Graph4 {
            matrix: (2 * i + 1) as u16,
        }
        .exhaustive_search();
        assert_eq!(solution_lower & 0xf0, 0);
        assert_eq!(solution_upper & 0xf0, 0);
        *entry = solution_lower | (solution_upper << 4);
    }

    table
}
